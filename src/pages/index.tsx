/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-return */
/* eslint-disable @typescript-eslint/no-explicit-any */
import dynamic from "next/dynamic";
import Head from "next/head";
import Link from "next/link";

import sample_data from "~/sample_data/data_time.json";

const randColor = () =>
  "#" + (0x1000000 + Math.random() * 0xffffff).toString(16).substr(1, 6);
const ResponsiveLine = dynamic(
  () => import("@nivo/line").then((m) => m.ResponsiveLine),
  { ssr: false },
);

const styleById: Record<string, any> = {
  Predicted: {
    strokeDasharray: "6, 6",
    strokeWidth: 2,
  },
  default: {
    strokeWidth: 2,
  },
};

const DashedLine = ({
  series,
  lineGenerator,
  xScale,
  yScale,
}: {
  series: any;
  lineGenerator: any;
  xScale: any;
  yScale: any;
}) => {
  return series.map(
    ({ id, data, color }: { id: string; data: any; color: any }) => {
      return (
        <path
          key={id}
          d={lineGenerator(
            data.map((d: any) => ({
              x: xScale(d.data.x),
              y: yScale(d.data.y),
            })),
          )}
          fill="none"
          stroke={color}
          style={styleById[id] || styleById.default}
        />
      );
    },
  );
};

export default function Home() {
  return (
    <>
      <Head>
        <title>Meteoro</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex min-h-screen flex-col items-center justify-center bg-gray-100">
        <div className="mx-auto max-w-7xl py-6 sm:px-6 lg:px-8">
          <div className="mx-auto max-w-none">
            <div className="overflow-hidden bg-white sm:rounded-lg sm:shadow">
              <div className="h-[40rem] w-[80rem] px-4 py-5 sm:p-6">
                {/* <Line
                  // style={{ width: "100%", height: "100%" }}
                  options={{
                    // responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                      legend: {
                        // position: "top" as const,
                        display: false,
                      },
                      // title: {
                      //   display: true,
                      //   text: "Chart.js Line Chart",
                      // },
                    },
                  }}
                  data={{
                    labels: data
                      .concat(dataPredicted)
                      .map((entry) =>
                        new Date(entry.timestamp * 1000).toLocaleString(),
                      ),
                    datasets: [
                      {
                        label: "Actual Power",
                        data: data.map((entry) => entry.power),
                        borderColor: "rgb(255, 99, 132)",
                        backgroundColor: "rgba(255, 99, 132, 0.5)",
                      },
                      {
                        label: "Predicted Power",
                        data: data
                          .concat(dataPredicted)
                          .map((entry) => entry.power),
                        borderColor: "rgb(255, 99, 132)",
                        backgroundColor: "rgba(255, 99, 132, 0.5)",
                        borderDash: [5, 5],
                      },
                    ],
                  }}
                /> */}
                <ResponsiveLine
                  colors={["#ea580c", "#fb923c"]}
                  data={[
                    {
                      id: "Actual",
                      // data: data.map((entry) => ({
                      //   x: new Date(entry.timestamp * 1000).toLocaleString(),
                      //   y: entry.power,
                      // })),
                      data: sample_data.slice(0, 45).map((entry) => ({
                        x: new Date(entry.date),
                        y: entry["Produced Power (W)"],
                      })),
                    },
                    {
                      id: "Predicted",
                      // data: data.map((entry) => ({
                      //   x: new Date(entry.timestamp * 1000).toLocaleString(),
                      //   y: entry.power,
                      // })),
                      data: sample_data.slice(45, 60).map((entry) => ({
                        x: new Date(entry.date),
                        y: entry["Produced Power (W)"],
                      })),
                    },
                  ]}
                  margin={{ top: 50, right: 110, bottom: 50, left: 60 }}
                  // xScale={{ type: "point" }}
                  // yScale={{
                  //   type: "linear",
                  //   min: "auto",
                  //   max: "auto",
                  //   // stacked: true,
                  //   reverse: false,
                  // }}
                  xScale={{
                    // precision: "hour",
                    type: "time",
                    // format: "%Y-%m-%d",
                  }}
                  xFormat="time:%d"
                  yScale={{
                    type: "linear",
                  }}
                  yFormat={(value) =>
                    `${Number(value).toLocaleString("en-US", {
                      minimumFractionDigits: 2,
                      maximumFractionDigits: 2,
                    })} W`
                  }
                  curve="monotoneX"
                  enableSlices={"x"}
                  layers={[
                    "grid",
                    "markers",
                    "areas",
                    "crosshair",
                    DashedLine,
                    "slices",
                    "points",
                    "axes",
                    "legends",
                  ]}
                  // axisTop={null}
                  // axisRight={null}
                  // axisBottom={{
                  //   tickSize: 5,
                  //   tickPadding: 5,
                  //   tickRotation: 0,
                  //   legend: "transportation",
                  //   legendOffset: 36,
                  //   legendPosition: "middle",
                  // }}
                  // axisLeft={{
                  //   tickSize: 5,
                  //   tickPadding: 5,
                  //   tickRotation: 0,
                  //   legend: "count",
                  //   legendOffset: -40,
                  //   legendPosition: "middle",
                  // }}
                  // pointSize={10}
                  // pointColor={{ theme: "background" }}
                  // pointBorderWidth={2}
                  // pointBorderColor={{ from: "serieColor" }}
                  // pointLabelYOffset={-12}
                  useMesh={true}
                  // legends={[
                  //   {
                  //     anchor: "bottom-right",
                  //     direction: "column",
                  //     justify: false,
                  //     translateX: 100,
                  //     translateY: 0,
                  //     itemsSpacing: 0,
                  //     itemDirection: "left-to-right",
                  //     itemWidth: 80,
                  //     itemHeight: 20,
                  //     itemOpacity: 0.75,
                  //     symbolSize: 12,
                  //     symbolShape: "circle",
                  //     symbolBorderColor: "rgba(0, 0, 0, .5)",
                  //     effects: [
                  //       {
                  //         on: "hover",
                  //         style: {
                  //           itemBackground: "rgba(0, 0, 0, .03)",
                  //           itemOpacity: 1,
                  //         },
                  //       },
                  //     ],
                  //   },
                  // ]}
                />
              </div>
            </div>
          </div>
        </div>
      </main>
    </>
  );
}
